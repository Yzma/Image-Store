generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Deal {
  productID         Int      @map("product_id") 
  product           Product  @relation(fields: [productID], references: [id])

  discountPrice     Decimal  @map("discount_price")

  discountStartDate DateTime @map("discount_start_date")
  discountEndDate   DateTime @map("discount_end_date")

  @@unique([productID])
  @@index([productID])
  @@map("deals")
}

model Product {
  id           Int      @id @default(autoincrement())

  dateCreated  DateTime @default(now()) @map("date_created")
  currentPrice Decimal  @map("current_price")

  imageID      Int      @map("image_id")
  image        Image    @relation(fields: [imageID], references: [id])

  deals        Deal[]

  @@unique([imageID])
  @@index([imageID])
  @@map("products")
}

model Transaction {
  id            Int      @id @default(autoincrement())
  datePurchased DateTime @default(now()) @map("date_purchased")
  amount        Decimal

  buyerUserID   Int
  buyer         User   @relation(name: "ImagesBought", fields: [buyerUserID], references: [id])

  sellerUserID  Int
  seller        User  @relation(name: "ImagesSold", fields: [sellerUserID], references: [id])

  imageID       Int   @map("image_id")
  image         Image @relation(fields: [imageID], references: [id])

  @@unique([buyerUserID, sellerUserID, imageID])
  @@index([buyerUserID, sellerUserID, imageID])
  @@map("transactions")
}

model Image {
  id           Int      @id @default(autoincrement())
  title        String   
  description  String?
  private      Boolean  @default(false)
  fileType     String
  dateUploaded DateTime @default(now()) @map("date_uploaded")
  fileName     String

  userID       Int      @map("user_id")
  user         User     @relation(fields: [userID], references: [id])

  transactions Transaction[]
  products     Product[]

  @@unique([id, userID])
  @@index([title, description, userID])
  @@map("images")
}

// Next-Auth Models

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  balance       Decimal   @default(10.0)

  images        Image[]
  imagesBought  Transaction[]       @relation(name: "ImagesBought")
  imagesSold    Transaction[]       @relation(name: "ImagesSold")

  @@map("users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}
